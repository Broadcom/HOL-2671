# Auto-generated from Avi Configuration
---
- hosts: localhost
  connection: local
  gather_facts: yes
  vars_files:
    - /vpodrepo/2025-labs/2571/HOL-2x71/2x71_podsetup/secrets.yml
  vars:
    avi_credentials:
      controller: "{{ avi_controller }}"
      username: admin
      password: "{{ lookup('ansible.builtin.env', 'AVICTRL_PASS') }}"
      api_version: "{{ api_version }}"

  collections:
    - vmware.alb

  tasks:
    - name: "Wait for the portal to become active"
      uri:
        url: "https://{{ avi_controller }}/api/initial-data"
        validate_certs: no
        status_code: 200
      register: result
      until: result.status == 200
      retries: 300
      delay: 10

    - name: Create Local Content Library
      community.vmware.vmware_content_library_manager:
        hostname: "vcsa-01a.vcf.sddc.lab"
        username: '{{ vc_username }}'
        password: "{{ lookup('ansible.builtin.env', 'AVICTRL_PASS') }}
        library_name: "avi_cl_site{{site_letter}}"
        library_description: 'Avi CL'
        library_type: local
        datastore_name: "Region01A-NFS-{{datastore_number}}"
        validate_certs: false
        state: present

    - name: Basic system configuration
      vmware.alb.avi_systemconfiguration:
        avi_credentials: "{{ avi_credentials }}"
        welcome_workflow_complete: true
        default_license_tier: ENTERPRISE
        dns_configuration:
          server_list:
            - addr: "10.0.0.2"
              type: V4
        ntp_configuration:
          # ntp_server_list:
          #   - addr: 10.0.100.1
          #     type: V4
          ntp_servers:
            - server:
                addr: 10.0.100.1
                type: V4
        proxy_configuration:
          host: 10.0.0.1
          port: 3128

    - pause:
        seconds: 15

    - name: Apply License Key
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        http_method: put
        path: licensing
        data:
          serial_key: "{{ license_key }}"
      ignore_errors: yes

    - name: backup passphrase
      vmware.alb.avi_backupconfiguration:
        avi_credentials: "{{avi_credentials}}"
        name: "Backup-Configuration"
        backup_passphrase: ""{{ lookup('ansible.builtin.env', 'AVICTRL_PASS') }}"
        save_local: true

    - name: Controller properties
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        path: controllerproperties
        http_method: put
        data:
          shared_ssl_certificates: true
          api_idle_timeout: 1440

    - name: make vcenter user credential
      vmware.alb.avi_cloudconnectoruser:
        avi_credentials: "{{avi_credentials}}"
        name: nsx_admin
        tenant: admin
        nsxt_credentials:
          username: admin
          password: "{{ lookup('ansible.builtin.env', 'AVICTRL_PASS') }}"

    - name: make vcenter user credential
      vmware.alb.avi_cloudconnectoruser:
        avi_credentials: "{{avi_credentials}}"
        name: vcsa_admin
        tenant: admin
        vcenter_credentials:
          username: "{{vc_username}}"
          password: "{{ lookup('ansible.builtin.env', 'AVICTRL_PASS') }}

    - name: check NSX manager for ready
      ansible.builtin.uri:
        url: https://nsxmgr-01a.vcf.sddc.lab/login.jsp
        return_content: true        
        validate_certs: no
      register: nsx_content
      failed_when: "'<title>VMware NSX | Login</title>' not in nsx_content.content"
      until: nsx_content is not failed
      retries: 30 
      delay: 10 


    - name: Retrieve Transport Zone
      vmware.alb.avi_api_session:
        avi_credentials: "{{avi_credentials}}"
        http_method: "post"
        timeout: 300
        path: "nsxt/transportzones"
        data:
          host: "nsxmgr-01a.vcf.sddc.lab"
          credentials_uuid: "{{ lookup('avi', avi_credentials=avi_credentials, obj_name='nsx_admin', obj_type='cloudconnectoruser').uuid }}"
      until: tz_obj is not failed
      #failed_when: "'Error 500 Msg' in tz_obj.msg"
      retries: 30
      delay: 10
      register: tz_obj
  
    - name: Retrieve vCenter Content Library
      vmware.alb.avi_api_session:
        avi_credentials: "{{avi_credentials}}"
        http_method: "post"
        timeout: 300
        path: "vcenter/contentlibraries"
        data:
          host: "vcsa-01a.vcf.sddc.lab"
          credentials_uuid: "{{ lookup('avi', avi_credentials=avi_credentials, obj_name='vcsa_admin', obj_type='cloudconnectoruser').uuid }}"
      register: content_library_obj

    - name: Grab TZ ID field
      set_fact:
        tz_id:
          transport_zone: "{{ tz_obj | json_query(tz_id_query) }}"
      vars:
        tz_id_query: "obj.resource.nsxt_transportzones[?name=='Overlay-TZ-{{site_letter | upper}}'].id"     

    - name: Grab CL ID field
      set_fact:
        cl_id:
          transport_zone: "{{ content_library_obj | json_query(cl_id_query) }}"
      vars:
        cl_id_query: "obj.resource.vcenter_clibs[?name=='avi_cl_site{{site_letter}}'].id"     

    - name: make cloud
      vmware.alb.avi_cloud:
        avi_credentials: "{{avi_credentials}}"
        name: "{{cloud_name}}"
        dhcp_enabled: false
        nsxt_configuration:
          automate_dfw_rules: false
          data_network_config:
            tier1_segment_config:
              manual:
                tier1_lrs:
                  - segment_id: "/infra/segments/ls-vmnet-{{site_letter}}"
                    tier1_lr_id: "/infra/tier-1s/{{t1_name}}"
              segment_config_mode: TIER1_SEGMENT_MANUAL
            transport_zone: "{{tz_id.transport_zone | first}}"
            tz_type: OVERLAY
          domain_id: default
          enforcementpoint_id: default
          management_network_config:
            overlay_segment:
              segment_id: "/infra/segments/ls-avimgmt-{{site_letter}}"
              tier1_lr_id: "/infra/tier-1s/{{t1_name}}"
            transport_zone: "{{tz_id.transport_zone | first}}"
            tz_type: OVERLAY
          nsxt_credentials_ref: /api/cloudconnectoruser?name=nsx_admin
          nsxt_url: "nsxmgr-01a.vcf.sddc.lab"
          site_id: default
        obj_name_prefix: "site{{site_letter}}"
        prefer_static_routes: false
        state_based_dns_registration: false
        vtype: CLOUD_NSXT

    - name: Create Vcenter Server
      vmware.alb.avi_api_session:
        avi_credentials: "{{avi_credentials}}"
        http_method: post
        path: "vcenterserver"
        data:
          name: "site{{site_letter}}_vcsa"
          vcenter_url: "{{vcenter_url}}"
          cloud_ref: "/api/cloud/?name={{ cloud_name }}"
          vcenter_credentials_ref: "/api/cloudconnectoruser/?name=vcsa_admin"
          content_lib: 
            id: "{{ content_library_obj.obj.resource.vcenter_clibs.0.id }}"
      # ignore_errors: yes

    - name: Check for cloud
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        http_method: get
        path: cloud
        params: 
          name: "Site{{site_letter | upper}}_nsx_cloud"
      register: cloud_lookup_result


    - name: Check for network
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        http_method: get
        path: networksubnetlist
        params: 
          cloud_uuid:  "{{ cloud_lookup_result['obj']['results'][0]['uuid'] }}"
          name: "ls-vmnet-{{site_letter}}"
      until: data_network_lookup_result.obj.results.0 is defined
      retries: 30
      delay: 10
      register: data_network_lookup_result


    - name: Check for network
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        http_method: get
        path: networksubnetlist
        params: 
          cloud_uuid:  "{{ cloud_lookup_result['obj']['results'][0]['uuid'] }}"
          name: "ls-avimgmt-{{site_letter}}"
      until: mgmt_network_lookup_result.obj.results.0 is defined
      retries: 30
      delay: 10
      register: mgmt_network_lookup_result


    - name: create ipam for cloud
      vmware.alb.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials }}"
        internal_profile:
          usable_networks:
            - nw_ref: "/api/network?name=ls-vmnet-{{site_letter}}"
          ttl: 30
        name: "ipam-region01{{site_letter}}"
        #tenant_ref: "/api/tenant?name=admin"
        type: IPAMDNS_TYPE_INTERNAL
      #when: ipam_lookup_result is not defined


    - name: create dns profile for cloud
      vmware.alb.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials }}"
        name: "dns-region01{{site_letter}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
        internal_profile:
          dns_service_domain:
          - domain_name: "region01{{site_letter}}.vcf.sddc.lab"
          - domain_name: "app.region01{{site_letter}}.vcf.sddc.lab"
          ttl: 30
        tenant: admin



    - name: Define vmware cloud configuration networking - apisession
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        path: "cloud/{{ cloud_lookup_result['obj']['results'][0]['uuid'] }}"
        http_method: patch
        data:
          replace:
            dns_provider_ref: "/api/ipamdnsproviderprofile?name=dns-region01{{site_letter}}"
            ipam_provider_ref: "/api/ipamdnsproviderprofile?name=ipam-region01{{site_letter}}"


    - name: add static range to mgmt network
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        path: "network/{{mgmt_network_lookup_result.obj.results.0.uuid}}"
        http_method: patch
        data:
          replace:
            dhcp_enabled: false
            configured_subnets:
            - prefix:
                ip_addr:
                  addr: "{{ mgmt_subnet }}"
                  type: V4
                mask: "24"
              static_ip_ranges:
              - range:
                  begin:
                    addr: "{{mgmt_range_start}}"
                    type: V4
                  end:
                    addr: "{{mgmt_range_end}}"
                    type: V4
                type: STATIC_IPS_FOR_VIP_AND_SE
  
    - name: add static range to data network
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        path: "network/{{data_network_lookup_result.obj.results.0.uuid}}"
        http_method: patch
        data:
          replace:
            dhcp_enabled: false
            configured_subnets:
            - prefix:
                ip_addr:
                  addr: "{{ vip_subnet }}"
                  type: V4
                mask: "24"
              static_ip_ranges:
              - range:
                  begin:
                    addr: "{{vip_range_start}}"
                    type: V4
                  end:
                    addr: "{{vip_range_end}}"
                    type: V4
                type: STATIC_IPS_FOR_VIP_AND_SE


    - name: SE data nic route
      vmware.alb.avi_vrfcontext:
        avi_credentials: "{{avi_credentials}}"
        cloud_ref: "/api/cloud?name={{cloud_name}}"
        name: "{{t1_name}}"
        static_routes:
        - next_hop:
            addr: "{{ data_default_gateway }}"
            type: V4
          prefix:
            ip_addr:
              addr: 0.0.0.0
              type: V4
            mask: 0
          route_id: 1
        attrs:
        - key: tier1path
          value: "/infra/tier-1s/{{t1_name}}"


    - name: configure default se group for folder
      vmware.alb.avi_serviceenginegroup:
        avi_api_patch_op: replace
        avi_api_update_method: patch
        avi_credentials: "{{ avi_credentials }}"
        name: Default-Group
        cloud_ref: "/api/cloud?name={{cloud_name}}"
        se_name_prefix: "seg"
        disk_per_se: 25
        cpu_reserve: false
        mem_reserve: false
        vcpus_per_se: 1
        memory_per_se: 8192
        extra_shared_config_memory: 640
        max_vs_per_se: 200
        self_se_election: true
        se_deprovision_delay: 0
      when: site_letter == "a"

    - name: configure default se group for folder  ## site B SEs don't need to be big for bot
      vmware.alb.avi_serviceenginegroup:
        avi_api_patch_op: replace
        avi_api_update_method: patch
        avi_credentials: "{{ avi_credentials }}"
        name: Default-Group
        cloud_ref: "/api/cloud?name={{cloud_name}}"
        se_name_prefix: "seg"
        disk_per_se: 25
        cpu_reserve: false
        mem_reserve: false
        vcpus_per_se: 1
        memory_per_se: 2048
        max_vs_per_se: 200
        self_se_election: true
        se_deprovision_delay: 0
      when: site_letter == "b"


    - name: tweak system-secure-http profile for true client IP and turning off HSTS
      vmware.alb.avi_applicationprofile:
        avi_credentials: "{{avi_credentials}}" 
        avi_api_patch_op: replace
        avi_api_update_method: patch
        name: System-Secure-HTTP
        type: APPLICATION_PROFILE_TYPE_HTTP
        http_profile:
          hsts_enabled: false
          true_client_ip:
            direction: LEFT
            headers:
            - X-Forwarded-For
            index_in_header: 1
          use_true_client_ip: true

    - name: tweak system-http profile for true client IP
      vmware.alb.avi_applicationprofile:
        avi_credentials: "{{avi_credentials}}" 
        avi_api_patch_op: replace
        avi_api_update_method: patch
        name: System-HTTP
        type: APPLICATION_PROFILE_TYPE_HTTP
        http_profile:
          true_client_ip:
            direction: LEFT
            headers:
            - X-Forwarded-For
            index_in_header: 1
          use_true_client_ip: true
  
    - name: add app profile for proxy protocol
      vmware.alb.avi_applicationprofile:
        avi_credentials: "{{avi_credentials}}" 
        name: "ProxyProtocol"
        type: "APPLICATION_PROFILE_TYPE_L4"
        tcp_app_profile:
          proxy_protocol_enabled: true
          proxy_protocol_version: PROXY_PROTOCOL_VERSION_2

    - name: configure System-Standard ssl profile
      vmware.alb.avi_sslprofile:
        avi_credentials: "{{ avi_credentials }}"
        avi_api_patch_op: replace
        avi_api_update_method: patch
        accepted_versions:
        - type: SSL_VERSION_TLS1_2
        - type: SSL_VERSION_TLS1_3
        cipher_enums:
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        ciphersuites: TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256
        name: System-Standard



    - name: upload hol root
      vmware.alb.avi_sslkeyandcertificate:
        avi_credentials: "{{avi_credentials}}"
        #certificate_base64: false
        certificate:
            certificate: "{{ lookup('file', '/lmchol/hol/ca/ca.crt') }}"
        type: SSL_CERTIFICATE_TYPE_CA
        name: HandsOnLabs Root
        tenant: "admin"

    - name: Create controller cert for hol wildcard 
      vmware.alb.avi_sslkeyandcertificate:
        avi_credentials: "{{ avi_credentials }}"
        key: "{{ lookup('file', '/lmchol/hol/ssl/avi_wildcardcert_key.pem') }}"
        key_passphrase: ""
        certificate:
          certificate: "{{ lookup('file', '/lmchol/hol/ssl/avi_wildcardcert.pem') }}"
        type: SSL_CERTIFICATE_TYPE_SYSTEM
        name: "HandsOnLabs Controllercert"
        tenant: admin

    - name: Create app cert for hol wildcard
      vmware.alb.avi_sslkeyandcertificate:
        avi_credentials: "{{ avi_credentials }}"
        key: "{{ lookup('file', '/lmchol/hol/ssl/avi_wildcardcert_key.pem') }}"
        key_passphrase: ""
        certificate:
          certificate: "{{ lookup('file', '/lmchol/hol/ssl/avi_wildcardcert.pem') }}"
        type: SSL_CERTIFICATE_TYPE_VIRTUALSERVICE
        name: "HandsOnLabs_Appcert"
        tenant: admin

 
    - name: 'Create or Update Pool: demo_vs-pool'
      vmware.alb.avi_pool:
        avi_credentials: "{{ avi_credentials }}"
        analytics_policy:
          enable_realtime_metrics: true
        name: demo_vs-pool
        cloud_ref: "/api/cloud/?name={{cloud_name}}"
        health_monitor_refs:
        - /api/healthmonitor?name=System-HTTP
        lb_algorithm: LB_ALGORITHM_LEAST_CONNECTIONS
        tier1_lr: "/infra/tier-1s/{{t1_name}}"
        servers:
          - port: 30001
            ip:
              addr: "{{worker1}}"
              type: V4
            hostname: "k8sworker-01{{site_letter}}"
          - port: 30001
            ip:
              addr: "{{worker2}}"
              type: V4
            hostname: "k8sworker-02{{site_letter}}"
        tenant: admin
      when: site_letter == 'a'

    - name: 'Create or Update VsVip: vsvip-dns-vs-01a-Default-Cloud'
      vmware.alb.avi_vsvip:
        avi_credentials: "{{ avi_credentials }}"
        name: "dns-vs-01{{site_letter}}-VsVip"
        vrf_context_ref: "/api/vrfcontext?name={{t1_name}}"
        cloud_ref: "/api/cloud?name={{cloud_name}}"
        tier1_lr: "/infra/tier-1s/{{t1_name}}"
        vip:
        - vip_id: '1'
          ip_address:
            addr: "{{dns_ip}}"
            type: V4
          auto_allocate_ip: false
          auto_allocate_floating_ip: false
          avi_allocated_vip: false
          avi_allocated_fip: false
          auto_allocate_ip_type: V4_ONLY
          prefix_length: 32
        dns_info:
        - fqdn: "dns-vs-01{{site_letter}}.region01{{site_letter}}.vcf.sddc.lab"
          ttl: 30
          type: DNS_RECORD_A
          algorithm: DNS_RECORD_RESPONSE_CONSISTENT_HASH
        tenant: admin

    - name: 'Create or Update VsVip: vsvip-demo_vs-Default-Cloud'
      vmware.alb.avi_vsvip:
        avi_credentials: "{{ avi_credentials }}"
        name: demo_vs-VsVip
        vrf_context_ref: "/api/vrfcontext?name={{t1_name}}"
        cloud_ref: "/api/cloud?name={{cloud_name}}"
        tier1_lr: "/infra/tier-1s/{{t1_name}}"
        vip:
        - vip_id: '1'
          ip_address:
            addr: 172.16.130.11
            type: V4
          enabled: true
          auto_allocate_ip: false
          auto_allocate_floating_ip: false
          avi_allocated_vip: false
          avi_allocated_fip: false
          auto_allocate_ip_type: V4_ONLY
        dns_info:
        - fqdn: demo.region01a.vcf.sddc.lab
          ttl: 30
          type: DNS_RECORD_A
          algorithm: DNS_RECORD_RESPONSE_CONSISTENT_HASH
        tenant: admin
      when: site_letter == 'a'

    - name: 'Create or Update VirtualService: dns-vs-01a'
      vmware.alb.avi_virtualservice:
        avi_credentials: "{{ avi_credentials }}"
        name: "dns-vs-01{{site_letter}}"
        application_profile_ref: /api/applicationprofile?name=System-DNS
        network_profile_ref: /api/networkprofile?name=System-UDP-Per-Pkt
        se_group_ref: /api/serviceenginegroup?name=Default-Group
        vrf_context_ref: "/api/vrfcontext?name={{t1_name}}"
        cloud_ref: "/api/cloud?name={{cloud_name}}"
        analytics_profile_ref: /api/analyticsprofile?name=System-Analytics-Profile
        vsvip_ref: "/api/vsvip?name=dns-vs-01{{site_letter}}-VsVip"
        services:
        - port: 53
          port_range_end: 53
          enable_ssl: false
        - port: 53
          port_range_end: 53
          enable_ssl: false
          override_network_profile_ref: /api/networkprofile?name=System-TCP-Proxy
        analytics_policy:
          full_client_logs:
            enabled: true
            duration: 0
            throttle: 10
          client_insights: NO_INSIGHTS
          all_headers: false
          metrics_realtime_update:
            enabled: false
            duration: 0
          udf_log_throttle: 10
          significant_log_throttle: 10
          learning_log_policy:
            enabled: false
        tenant: admin

    - name: 'Create or Update VirtualService: demo_vs'
      vmware.alb.avi_virtualservice:
        avi_credentials: "{{ avi_credentials }}"
        name: demo_vs
        enabled: true
        application_profile_ref: /api/applicationprofile?name=System-Secure-HTTP
        se_group_ref: /api/serviceenginegroup?name=Default-Group
        vrf_context_ref: "/api/vrfcontext?name={{t1_name}}"
        cloud_ref: "/api/cloud?name={{cloud_name}}"
        analytics_profile_ref: /api/analyticsprofile?name=System-Analytics-Profile
        vsvip_ref: /api/vsvip?name=demo_vs-VsVip
        services:
        - port: 80
          enable_ssl: false
          port_range_end: 80
        - port: 443
          enable_ssl: true
          port_range_end: 443
        analytics_policy:
          full_client_logs:
            enabled: true
            duration: 0
            throttle: 10
          client_insights: NO_INSIGHTS
          all_headers: false
          metrics_realtime_update:
            enabled: true
            duration: 0
          udf_log_throttle: 10
          significant_log_throttle: 10
          learning_log_policy:
            enabled: false
        network_profile_ref: /api/networkprofile?name=System-TCP-Proxy
        pool_ref: /api/pool?name=demo_vs-pool
        ssl_key_and_certificate_refs:
        - /api/sslkeyandcertificate?name=HandsOnLabs_Appcert
        - /api/sslkeyandcertificate?name=System-Default-Cert-EC
        ssl_profile_ref: /api/sslprofile?name=System-Standard
        tenant: admin
      when: site_letter == 'a'



    - name: Basic system configuration
      vmware.alb.avi_systemconfiguration:
        avi_credentials: "{{ avi_credentials }}"
        avi_api_patch_op: replace
        avi_api_update_method: patch
        welcome_workflow_complete: true
        default_license_tier: ENTERPRISE
        dns_configuration:
          server_list:
            - addr: 10.0.0.2
              type: V4
        ntp_configuration:
          # ntp_server_list:
          #   - addr: 10.0.100.1
          #     type: V4
          ntp_servers:
            - server:
                addr: 10.0.100.1
                type: V4
        portal_configuration:
          allow_basic_authentication: true
          api_force_timeout: 24
          sslprofile_ref: "/api/sslprofile/?name=System-Standard-Portal"
          sslkeyandcertificate_refs: 
            - "/api/sslkeyandcertificate?name=HandsOnLabs_Appcert"
        dns_virtualservice_refs: 
          - "/api/virtualservice?name=dns-vs-01{{site_letter}}"

    - name: Check for license
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        http_method: get
        path: license
      register: license_lookup_result

    - set_fact:
        eval_license_name: "{{ license_lookup_result | json_query(query) }}"
      vars:
        query: "obj.licenses[?license_name=='Eval'].license_id"

    # - debug: var=eval_license_name

    - name: delete eval Avi License if exists
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        http_method: delete
        path: "licensing/{{eval_license_name.0}}"
      when: eval_license_name.0 is defined
      #ignore_errors: yes
